require('dotenv').config();
const express = require('express');
const path = require('path');
const fs = require('fs');
const cors = require('cors');
const rateLimit = require('express-rate-limit');
const helmet = require('helmet');
const cookieParser = require('cookie-parser');

// Importar m√≥dulos locais
const Database = require('./database');
const Auth = require('./auth');

const app = express();
const PORT = process.env.PORT || 3000; // CORRE√á√ÉO: Mudou de 10000 para 3000

// ==============================================
// DIAGN√ìSTICO DE PASTAS (para debug)
// ==============================================
console.log('üîç ===== DIAGN√ìSTICO DE PASTAS =====');
console.log('üìÅ Pasta atual (backend):', __dirname);
console.log('üìÅ Pasta pai:', path.dirname(__dirname));

// Testar diferentes caminhos para frontend
const possiveisCaminhos = [
    path.join(path.dirname(__dirname), 'frontend'),
    path.join(__dirname, '../frontend'),
    path.join(__dirname, 'frontend'),
    path.join(path.dirname(__dirname), 'frontend')
];

let frontendPath = null;
possiveisCaminhos.forEach((caminho, index) => {
    console.log(`üîç Testando caminho ${index + 1}: ${caminho}`);
    if (fs.existsSync(caminho)) {
        console.log(`‚úÖ ENCONTRADO: ${caminho}`);
        if (!frontendPath) frontendPath = caminho;
    } else {
        console.log(`‚ùå N√£o existe: ${caminho}`);
    }
});
console.log('===============================');

// ==============================================
// CONFIGURA√á√ïES DE SEGURAN√áA
// ==============================================
app.use(helmet({
    contentSecurityPolicy: {
        directives: {
            defaultSrc: ["'self'"],
            styleSrc: ["'self'", "'unsafe-inline'", "https://fonts.googleapis.com"],
            fontSrc: ["'self'", "https://fonts.gstatic.com"],
            scriptSrc: ["'self'", "'unsafe-inline'", "'unsafe-eval'"],
            scriptSrcAttr: ["'unsafe-inline'"], // CORRE√á√ÉO: Permitir eventos inline
            imgSrc: ["'self'", "data:", "https:", "blob:"],
            connectSrc: ["'self'"],
        },
    },
}));

// CORRE√á√ÉO: CORS mais permissivo para desenvolvimento
app.use(cors({
    origin: function (origin, callback) {
        // Durante desenvolvimento, permitir qualquer origem
        // CORRE√á√ÉO: TRUST PROXY PARA RENDER
        if (process.env.NODE_ENV === 'production') {
            app.set('trust proxy', 1);
            console.log('‚úÖ Trust proxy configurado para produ√ß√£o');
        }
        // Em produ√ß√£o, usar lista espec√≠fica
        const allowedOrigins = [
            'https://super-duper-spork-rfk8.onrender.com',
            'http://localhost:3000',
            'http://localhost:10000'
        ];
        
        if (!origin || allowedOrigins.includes(origin)) {
            callback(null, true);
        } else {
            callback(new Error('N√£o permitido pelo CORS'));
        }
    },
    credentials: true,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization']
}));

// CORRE√á√ÉO: Rate limiting mais espec√≠fico
const apiLimiter = rateLimit({
    windowMs: (parseInt(process.env.LOGIN_ATTEMPTS_WINDOW) || 15) * 60 * 1000,
    max: parseInt(process.env.LOGIN_ATTEMPTS_MAX) || 5,
    message: { sucesso: false, mensagem: 'Muitas tentativas de login. Tente novamente em 15 minutos.' },
    standardHeaders: true,
    legacyHeaders: false,
    skip: (req) => req.path !== '/api/login' // S√≥ aplicar no login
});

const inscricaoLimiter = rateLimit({
    windowMs: 1 * 60 * 1000, // 1 minuto
    max: 3, // 3 inscri√ß√µes por minuto
    message: { sucesso: false, mensagem: 'Muitas tentativas de inscri√ß√£o. Tente novamente em 1 minuto.' },
    standardHeaders: true,
    legacyHeaders: false,
});

// ==============================================
// MIDDLEWARES
// ==============================================
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));
app.use(cookieParser());

// CORRE√á√ÉO: Middleware para logs de acesso melhorado
app.use((req, res, next) => {
    const ip = req.ip || req.connection.remoteAddress || 'unknown';
    const timestamp = new Date().toISOString();
    console.log(`[${timestamp}] ${req.method} ${req.path} de ${ip}`);
    next();
});

// ==============================================
// CONFIGURAR SERVIR ARQUIVOS EST√ÅTICOS
// ==============================================

// CORRE√á√ÉO: Verificar se public existe e criar estrutura
const publicPath = path.join(__dirname, 'public');
console.log('üìÅ Public path:', publicPath);
if (fs.existsSync(publicPath)) {
    app.use('/admin', express.static(publicPath));
    console.log('‚úÖ ADMIN: Servindo de', publicPath);
} else {
    console.log('‚ùå ADMIN: Pasta public n√£o encontrada - criando...');
    try {
        fs.mkdirSync(publicPath, { recursive: true });
        console.log('‚úÖ ADMIN: Pasta public criada');
    } catch (error) {
        console.error('‚ùå Erro ao criar pasta public:', error);
    }
}

// CORRE√á√ÉO: Servir frontend na raiz com fallback
if (frontendPath && fs.existsSync(frontendPath)) {
    app.use('/', express.static(frontendPath));
    console.log('‚úÖ FRONTEND: Servindo de', frontendPath);
    
    const indexPath = path.join(frontendPath, 'index.html');
    if (fs.existsSync(indexPath)) {
        console.log('‚úÖ INDEX.HTML encontrado:', indexPath);
    } else {
        console.log('‚ùå INDEX.HTML n√£o encontrado');
    }
    
    // Servir imagens
    const imagesPath = path.join(frontendPath, 'images');
    if (fs.existsSync(imagesPath)) {
        app.use('/images', express.static(imagesPath));
        console.log('‚úÖ IMAGES: Servindo de', imagesPath);
    }
} else {
    console.log('‚ùå FRONTEND: Pasta n√£o encontrada');
    
    // Fallback: servir uma p√°gina b√°sica se frontend n√£o existir
    app.get('/', (req, res) => {
        res.send(`
            <html>
                <head><title>Semana de Inova√ß√£o 2025</title></head>
                <body style="font-family: Arial; text-align: center; padding: 50px;">
                    <h1>üöÄ Semana de Inova√ß√£o 2025</h1>
                    <p>Sistema temporariamente em manuten√ß√£o</p>
                    <p><a href="/api/status">Ver Status da API</a></p>
                </body>
            </html>
        `);
    });
}

// ==============================================
// INICIALIZAR COMPONENTES
// ==============================================
const db = new Database();
const auth = new Auth();

// ==============================================
// ROTAS DE AUTENTICA√á√ÉO
// ==============================================
app.post('/api/login', apiLimiter, async (req, res) => {
    try {
        const { email, senha } = req.body;
        const ip = req.ip || req.connection.remoteAddress || 'unknown';
        
        console.log(`üîê Tentativa de login: ${email} de ${ip}`);
        
        if (!email || !senha) {
            return res.status(400).json({
                sucesso: false,
                mensagem: 'Email e senha s√£o obrigat√≥rios'
            });
        }

        const resultado = await auth.verificarLogin(email, senha, ip);
        
        if (resultado.sucesso) {
            res.cookie('authToken', resultado.token, {
                httpOnly: true,
                secure: process.env.NODE_ENV === 'production',
                sameSite: 'strict',
                maxAge: 2 * 60 * 60 * 1000
            });
            console.log(`‚úÖ Login bem-sucedido: ${email}`);
        } else {
            console.log(`‚ùå Login falhado: ${email} - ${resultado.mensagem}`);
        }
        
        res.status(resultado.sucesso ? 200 : 401).json(resultado);
        
    } catch (error) {
        console.error('‚ùå Erro no endpoint de login:', error);
        res.status(500).json({
            sucesso: false,
            mensagem: 'Erro interno do servidor'
        });
    }
});

app.post('/api/logout', (req, res) => {
    const ip = req.ip || req.connection.remoteAddress || 'unknown';
    console.log(`üîì Logout de ${ip}`);
    
    res.clearCookie('authToken');
    res.json({ sucesso: true, mensagem: 'Logout realizado com sucesso' });
});

app.get('/api/verificar-token', auth.middlewareAuth.bind(auth), (req, res) => {
    res.json({
        sucesso: true,
        usuario: req.usuario
    });
});

// ==============================================
// ROTAS DA API
// ==============================================

// Rota de status (p√∫blica)
app.get('/api/status', (req, res) => {
    res.json({
        status: 'Sistema Online',
        timestamp: new Date().toISOString(),
        environment: process.env.NODE_ENV || 'development',
        version: '2.0.1',
        frontend: frontendPath ? 'Configurado' : 'N√£o encontrado',
        database: 'SQLite',
        port: PORT
    });
});

// CORRE√á√ÉO: Rota para submeter inscri√ß√£o (p√∫blica) com melhor valida√ß√£o
app.post('/api/inscricoes', inscricaoLimiter, async (req, res) => {
    try {
        const inscricaoData = req.body;
        const ip = req.ip || req.connection.remoteAddress || 'unknown';
        
        console.log(`üìù Nova inscri√ß√£o de ${ip}:`, {
            nome: inscricaoData.nomeCompleto || 'N√£o informado',
            email: inscricaoData.email || 'N√£o informado'
        });
        
        // Valida√ß√£o b√°sica
        if (!inscricaoData.nomeCompleto || !inscricaoData.email) {
            return res.status(400).json({
                sucesso: false,
                mensagem: 'Nome completo e email s√£o obrigat√≥rios'
            });
        }
        
        // Mapear dados do frontend para formato do banco
        const dadosFormatados = dadosInscricao;
        
        const resultado = await db.criarInscricao(dadosFormatados);
        
        if (resultado.sucesso) {
            console.log(`‚úÖ Inscri√ß√£o salva - ID: ${resultado.id}`);
        } else {
            console.log(`‚ùå Erro ao salvar inscri√ß√£o: ${resultado.mensagem}`);
        }
        
        res.status(resultado.sucesso ? 201 : 400).json(resultado);
        
    } catch (error) {
        console.error('‚ùå Erro no endpoint de inscri√ß√µes:', error);
        res.status(500).json({
            sucesso: false,
            mensagem: 'Erro interno do servidor',
            erro: process.env.NODE_ENV === 'development' ? error.message : undefined
        });
    }
});

// ROTAS PROTEGIDAS (precisam de autentica√ß√£o)
app.get('/api/inscricoes', auth.middlewareAuth.bind(auth), async (req, res) => {
    try {
        const page = parseInt(req.query.page) || 1;
        const limit = parseInt(req.query.limit) || 50;
        const search = req.query.search || '';
        
        const resultado = await db.listarInscricoes(page, limit, search);
        res.json(resultado);
        
    } catch (error) {
        console.error('‚ùå Erro ao listar inscri√ß√µes:', error);
        res.status(500).json({
            sucesso: false,
            mensagem: 'Erro interno do servidor'
        });
    }
});

app.get('/api/estatisticas', auth.middlewareAuth.bind(auth), async (req, res) => {
    try {
        const stats = await db.obterEstatisticas();
        res.json(stats);
        
    } catch (error) {
        console.error('‚ùå Erro ao obter estat√≠sticas:', error);
        res.status(500).json({
            sucesso: false,
            mensagem: 'Erro interno do servidor'
        });
    }
});

app.delete('/api/inscricoes/:id', auth.middlewareAuth.bind(auth), async (req, res) => {
    try {
        const id = req.params.id;
        const resultado = await db.deletarInscricao(id);
        
        if (resultado.sucesso) {
            console.log(`üóëÔ∏è Inscri√ß√£o ${id} deletada por ${req.usuario.email}`);
        }
        
        res.json(resultado);
        
    } catch (error) {
        console.error('‚ùå Erro ao deletar inscri√ß√£o:', error);
        res.status(500).json({
            sucesso: false,
            mensagem: 'Erro interno do servidor'
        });
    }
});

app.get('/api/exportar', auth.middlewareAuth.bind(auth), async (req, res) => {
    try {
        const formato = req.query.formato || 'json';
        const resultado = await db.exportarDados(formato);
        
        if (resultado.sucesso) {
            res.setHeader('Content-Type', 'application/json');
            res.setHeader('Content-Disposition', `attachment; filename="inscricoes_${new Date().toISOString().split('T')[0]}.${formato}"`);
            res.send(resultado.dados);
        } else {
            res.status(400).json(resultado);
        }
        
    } catch (error) {
        console.error('‚ùå Erro ao exportar dados:', error);
        res.status(500).json({
            sucesso: false,
            mensagem: 'Erro interno do servidor'
        });
    }
});

// ==============================================
// ROTAS DO FRONTEND
// ==============================================

// CORRE√á√ÉO: Rota para a raiz (formul√°rio) com fallback
app.get('/', (req, res) => {
    if (frontendPath) {
        const indexPath = path.join(frontendPath, 'index.html');
        if (fs.existsSync(indexPath)) {
            res.sendFile(indexPath);
        } else {
            res.status(404).send(`
                <html>
                    <head><title>P√°gina n√£o encontrada</title></head>
                    <body style="font-family: Arial; text-align: center; padding: 50px;">
                        <h1>üìÑ P√°gina n√£o encontrada</h1>
                        <p>O arquivo index.html n√£o foi encontrado em: ${indexPath}</p>
                        <p><a href="/api/status">Ver Status do Sistema</a></p>
                    </body>
                </html>
            `);
        }
    } else {
        res.status(404).send(`
            <html>
                <head><title>Frontend n√£o configurado</title></head>
                <body style="font-family: Arial; text-align: center; padding: 50px;">
                    <h1>‚öôÔ∏è Frontend n√£o configurado</h1>
                    <p>Pasta frontend n√£o encontrada</p>
                    <p><a href="/api/status">Ver Status do Sistema</a></p>
                </body>
            </html>
        `);
    }
});

// Rotas espec√≠ficas para admin
app.get('/admin', (req, res) => {
    const adminPath = path.join(__dirname, 'public', 'admin.html');
    console.log('üìÑ Tentando acessar admin path:', adminPath);
    if (fs.existsSync(adminPath)) {
        res.sendFile(adminPath);
    } else {
        res.status(404).send(`
            <html>
                <head><title>Dashboard Admin</title></head>
                <body style="font-family: Arial; text-align: center; padding: 50px;">
                    <h1>üîß Dashboard em desenvolvimento</h1>
                    <p>Arquivo admin.html n√£o encontrado em: ${adminPath}</p>
                    <p><a href="/api/status">Ver Status do Sistema</a></p>
                    <p><a href="/">Voltar ao formul√°rio</a></p>
                </body>
            </html>
        `);
    }
});

app.get('/admin/', (req, res) => {
    res.redirect('/admin');
});

// ==============================================
// MIDDLEWARE DE ERRO GLOBAL
// ==============================================
app.use((error, req, res, next) => {
    const ip = req.ip || req.connection.remoteAddress || 'unknown';
    const timestamp = new Date().toISOString();
    
    console.error(`[${timestamp}] üí• ERRO GLOBAL de ${ip}:`, error.message);
    console.error(error.stack);
    
    res.status(error.status || 500).json({
        sucesso: false,
        mensagem: process.env.NODE_ENV === 'production' 
            ? 'Erro interno do servidor' 
            : error.message,
        timestamp: timestamp
    });
});

// ==============================================
// ROTA 404 (deve ser a √∫ltima)
// ==============================================
app.use('*', (req, res) => {
    const ip = req.ip || req.connection.remoteAddress || 'unknown';
    console.log(`üö´ Rota n√£o encontrada: ${req.originalUrl} de ${ip}`);
    res.status(404).json({
        sucesso: false,
        mensagem: 'Rota n√£o encontrada',
        rota: req.originalUrl,
        metodo: req.method
    });
});

// ==============================================
// INICIALIZAR SERVIDOR
// ==============================================
const iniciarServidor = async () => {
    try {
        console.log('üöÄ Iniciando servidor...');
        
        // Conectar banco de dados
        await db.conectar();
        console.log('üìä Banco de dados conectado!');
        
        // Criar tabelas
        await db.criarTabelas();
        console.log('‚úÖ Tabela de inscri√ß√µes criada/verificada!');
        
        // Iniciar servidor
        const server = app.listen(PORT, '0.0.0.0', () => {
            console.log('üîí ================================');
            console.log('   SEMANA DE INOVA√á√ÉO 2025');
            console.log('   üõ°Ô∏è  MODO SEGURO ATIVADO');
            console.log('================================');
            console.log(`üöÄ Servidor: http://localhost:${PORT}`);
            console.log(`üì± Frontend: ${frontendPath ? '‚úÖ Configurado' : '‚ùå N√£o encontrado'}`);
            console.log(`üìã Dashboard: http://localhost:${PORT}/admin`);
            console.log(`üîê Login: ${process.env.ADMIN_EMAIL || 'thais@teste.com'} / [senha protegida]`);
            console.log(`üìä API Status: http://localhost:${PORT}/api/status`);
            console.log(`üìù API Inscri√ß√µes: http://localhost:${PORT}/api/inscricoes`);
            console.log('üíæ Banco: SQLite conectado');
            console.log('üõ°Ô∏è  Rate Limiting: ‚úÖ Ativo');
            console.log('üîí JWT Security: ‚úÖ Ativo');
            console.log('üìù Logs Seguros: ‚úÖ Ativo');
            console.log(`üåê Environment: ${process.env.NODE_ENV || 'development'}`);
            console.log('================================');
        });
        
        // Graceful shutdown
        process.on('SIGTERM', () => {
            console.log('üîÑ Recebido SIGTERM, fechando servidor...');
            server.close(() => {
                console.log('‚úÖ Servidor fechado');
                db.fechar();
                process.exit(0);
            });
        });
        
    } catch (error) {
        console.error('‚ùå Erro ao inicializar servidor:', error);
        process.exit(1);
    }
};

// Tratar erros n√£o capturados
process.on('uncaughtException', (error) => {
    console.error('üí• Uncaught Exception:', error);
    process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('üí• Unhandled Rejection em:', promise, 'raz√£o:', reason);
    process.exit(1);
});

// Inicializar
iniciarServidor();